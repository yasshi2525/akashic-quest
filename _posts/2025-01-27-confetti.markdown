---
layout: post
title: "紙吹雪を作る"
date: 2025-01-27 18:00:00 +0900
categories: akashic
---

紙吹雪が舞う演出を作ってみましょう.

作業はブラウザ上で完結します. ツールのインストールは要りません.
コードを記述 → 実行 を繰り返すことで体感的な理解を目指します.

# 想定する読者

- JavaScript の基本的な命令 (変数, if, for) を聞いたことがあるが、自分でコードを書いたことはない
- Akashic Engine を使ったことがない

# 紙を作ろう

まずは 1 枚の紙を画面上に表示させましょう.
下記がスタート地点です. 画面の ▶️ ボタンを押すとプログラムが実行されます.
今は何も作ってないので何も起こりません. 4 行目の下記の文字が書かれたところにコードを書いていきます.

```javascript
// ゲーム本体の処理
```

{% include playground.html view="edit" preset="confetti/1" height=350 %}

早速ですが、以下のコードを 4 行目に書くと紙っぽいものが画面に表示されます.

```javascript
const paper = new g.FilledRect({
  scene,
  x: g.game.width / 2,
  y: 50,
  width: 25,
  height: 25,
  anchorX: 0.5,
  anchorY: 0.5,
  cssColor: "red",
});
scene.append(paper);
```

{% include playground.html view="edit" preset="confetti/2" height=400 %}

これは Akashic Engine のお作法なので覚えなくて大丈夫です.
この記事ではプログラムが出来上がっていく様子、「動き」というものはどうやって作ることができるのかを焦点に当てているので先に進みます.

# 紙を地面に落とす

画面に紙を表示できたので、地面に落としましょう.
紙吹雪っぽくしたいところですが、まずは一番コアなところである「落とす」を作ります.
落とすコードも Akashic Engine のお作法なので先に答えをお伝えします. 5-8 行目です.

```javascript
paper.onUpdate.add(() => {
  paper.y += 1;
  paper.modified();
});
```

▶️ を押して動作を確認してみましょう.

{% include playground.html view="edit" preset="confetti/3" height=400 %}

ここは動きに関するところなので解説します.
よくみるアニメーションは 1 秒間に何十回も描画命令を出すことで動いているように見せています.
Akashic Engine では `onUpdate.add(() => { /* 更新命令 */ });` というお作法でアニメーションさせることができます.
今回はここに `paper.y += 1` と書きました. これは紙としている四角の y 座標を 1 大きくするという意味です.
座標を 1 大きくすることを繰り返していくため真下に落ちていくように見えるのです.

## 天井から紙を落とす

紙吹雪なので天井から降らせたいですね. 紙を生成する際の y 座標を 0 より小さくすると画面外上部に出現させることができます.
4 行目の `y: 50` を `y: -100` にしてみましょう.

```diff
  const paper = new g.FilledRect({
    // ...
-   y: 50,
+   y: -100,
    // ...
  });
```

{% include playground.html view="edit" preset="confetti/4" height=400 %}

画面外から紙が落ちました.

# 地面まで落ちたならば紙を削除する

画面下部の地面に紙が到達したならば削除します. これは負荷対策のためです.
紙吹雪として四角形を延々と表示させ続けるといつかブラウザの処理限界に達してしまうからです.
ゲームを作るときはこうした描画要素が無限に増えないよう注意してください.

紙は `paper.destroy();` と記述することで削除できます.
「地面まで落ちた」という条件は `paper.y > g.game.height - 50` と書きます.
`g.game.height` は Akashic Engine のお作法で画面の高さを表します.
消えたことを確認するため、今だけ画面から離れる前に削除するようにします.
8 - 10 行目に以下を足します.

```javascript
if (paper.y > g.game.height - 50) {
  paper.destroy();
}
```

{% include playground.html view="edit" preset="confetti/5" height=400 %}

画面下まで移動したら紙が消えましたね.

## 画面外まで落ちた後、紙を削除する

ちゃんと紙が消えることが確認できたので、画面外まで落ちた後に削除するようにしましょう.
8 行目の `if` 文の条件を書き換えます.

```diff
- if (paper.y > g.game.height - 50) {
+ if (paper.y > g.game.height + 50) {
```

{% include playground.html view="edit" preset="confetti/6" height=400 %}

# 紙を回転させながら落とす

実際の紙吹雪のように見せるべく動きをリアルにしていきます.
紙が回転する様子をプログラミングします.
本記事では比較的シンプルかつ少ない命令で回転している「ように」見える方法をテクニックとして解説します.

## 上下方向に回転しているように見せる

まず上下方向に回転しているよう見せ方を工夫します.
真正面から見ている場合、紙が回転するほど見た目の高さが小さくなっていき、
目線と紙が平行になった後はまたもとの高さに戻っていきますね.

そこで時間が経過するほど紙の見た目の高さが増減するようにしてみます.
1 回の描画命令ごとに `dy` 分高さ `height` が減るとすると以下のように書けます.

```javascript
let dy = -1;
paper.onUpdate.add(() => {
  paper.height += dy;
  if (paper.height <= 0 || paper.height >= 25) {
    dy *= -1;
  }
```

{% include playground.html view="edit" preset="confetti/7" height=400 %}

コードを見てイメージがつかない場合は 8 行目の if 文の条件の `0` と `25` を別の数字にしてみてください.
四角形の大きさがどのようになったとき if 文の条件をみたすか把握できるかと思います.

## よりリアルに上下方向に回転しているように見せる

なんとなく紙が回転しているように見せることができましたが、無機質でどこか違和感がありますね.
実は回転を表す場合、三角関数を使うとリアルに見せられます.
そこで四角形の高さ `height` が _sin_ を表す `Math.sin()` に応じて変化するようにします.
_sin_ は -1 から 1 の値をとるため、紙の大きさ `25` をかけることで紙の高さに変換します.

```javascript
paper.height = Math.sin(theta) * 25;
theta += 0.1;
```

_sin_ の入力値 `theta` は紙の回転角を表しています. 回転し続けるよう 0.1 足します.
これにより回転角が 0.1 ずつ増え、そのたびに紙の高さが変わっていく挙動を表現できます.

`theta` は `0` で初期化します.

{% include playground.html view="edit" preset="confetti/8" height=400 %}

よりリアルに回転しているように見せられました.

## 左右方向にも回転させてみる

実際には上下方向だけでなく左右方向にも回転するので、よりリアルにしてみましょう.
四角形の幅 `width` が _cos_ を表す `Math.cos()` に応じて変化させてみましょう.

```diff
+ paper.width = Math.cos(theta) * 25;
  paper.height = Math.sin(theta) * 25;
  theta += 0.1;
```

{% include playground.html view="edit" preset="confetti/9" height=400 %}

あれれ? さっきより違和感が増してしまいました. 実は数学的には間違ったことをしているためです.
元に戻しましょう. Akashic Engine のお作法で `angle` という値を設定すると四角形をコマのように回転させることができます.
こちらを試してみましょう. (実際のゲーム開発もこのように試行錯誤しながらブラッシュアップさせていきます.)
(補足: `Math.sin` は JavaScript の命令のためラジアン単位、`paper.angle` は Akashic Engine の命令のため度数単位です.)

```diff
- paper.width = Math.cos(theta) * 25;
+ paper.angle += 5;
  paper.height = Math.sin(theta) * 25;
  theta += 0.1;
```

{% include playground.html view="edit" preset="confetti/10" height=400 %}

それっぽくなりましたね!
